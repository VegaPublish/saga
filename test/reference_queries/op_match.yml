title: "match operator"
documents:
- _id: "k1"
  _type: "koan"
  text: "What is your original face before you were born?"
  title: "The Medina"
  v_match: ["before", "bo*"]
- _id: "k2"
  _type: "koan"
  text: "When you can do nothing, what can you do?"
  v_match: "noth*"
- _id: "k3"
  _type: "koan"
  text: "When the many are reduced to one, to what is the one reduced?"
  v_match: "missing"
- _id: "embedded"
  _type: "koan-list"
  koans:
  - _key: "k1"
    text: "What is your original face before you were born?"
  - _key: "k2"
    text: "When you can do nothing, what can you do?"
  - _key: "k3"
    text: "When the many are reduced to one, to what is the one reduced?"
- _id: "id"
  _type: "values"
  v_array: [1, "string", true, null, [1, 2, 3], {"key": "value"}]
  v_decimal: 3.14
  v_false: false
  v_integer: 1
  v_null: null
  v_object: {
    "v_array": ["a", "b", "c"],
    "v_boolean": true,
    "v_decimal": 2.718,
    "v_integer": 2,
    "v_null": null,
    "v_object": {"k": "v"},
    "v_string": "abc"
  }
  v_string: "string"
  v_true: true

tests:
- title: "match filter simple, multiple terms"
  query: |
    *[_type == "koan" && text match ['Whe*', 'reduced']]._id
  result:
    ['k3']

- title: "match filter simple, multiple attributes"
  query: |
    *[_type == "koan" && [text, title] match 'Medina']._id
  result:
    ['k1']

- title: "match filter simple"
  query: |
    *[_type == "koan" && text match 'Whe*']._id
  result:
    ['k2', 'k3']

- title: "match filter simple"
  query: |
    [
      *[_type == "koan" && text match "when"]._id,
      *[_type == "koan" && text match "reduced"]._id,
      *[_type == "koan" && text match "ReDuCeD"]._id,
      *[_type == "koan" && text match "foo"]._id,
      *[_type == "koan" && text match "The*"]._id,
      *[(title match 'The*')][0...10]._id,
    ]
  result: [
    ['k2', 'k3'],
    ['k3'],
    ['k3'],
    [],
    ['k3'],
    ['k1']
  ]

- title: "match filter attributes"
  skip: true
  # FIXME we should have a test here with v_array, which should not error out
  query: |
    [
      *[_type == "koan" && text match v_match]._id,
    ]
  result: [
    ['k1', 'k2'],
  ]

- title: "match filter multiple terms"
  query: |
    [
      *[_type == "koan" && text match ['what', 'ReDuCeD']]._id,
      *[_type == "koan" && text match ['original', 'reduced']]._id,
      *[_type == "koan" && text match ['foo', 'bar']]._id,
      *[_type == "koan" && [_id, text] match ['what', 'reduced']]._id,
      *[_type == "koan" && [_id, text] match ['original', 'reduced']]._id,
      *[_type == "koan" && [_id, text] match ['foo', 'bar']]._id,
      *[_type == "koan" && [_id, text] match ['k3', 'reduced']]._id,
      *[_type == "koan" && [_id, text] match 'k3']._id,
      *[_type == "koan" && [_id, text] match 'reduced']._id,
    ]
  result: [
    ['k3'],
    [],
    [],
    ['k3'],
    [],
    [],
    [],
    ['k3'],
    ['k3'],
  ]
- title: "match filter wildcards"
  query: |
    [
      *[_type == "koan" && text match 'ReDuC*']._id,
      *[_type == "koan" && text match 'reduced*']._id,
      *[_type == "koan" && text match 'reducedx*']._id,
      *[_type == "koan" && text match '*reduced']._id,
      *[_type == "koan" && text match '*educed']._id,
      *[_type == "koan" && text match 'red*ced']._id,
    ]
  result: [
    ['k3'],
    ['k3'],
    [],
    # FIXME These 3 should error out, see:
    # https://github.com/sanity-io/gradient/issues/582
    [],
    [],
    [],
  ]

# - title: "match projection embedded filter simple"
#   query: |
#     [
#       *[_type == "koan-list"]{"koans": koans[text match "when"]|order(_key)._key}[0].koans,
#       *[_type == "koan-list"]{"koans": koans[text match "reduced"]|order(_key)._key}[0].koans,
#       *[_type == "koan-list"]{"koans": koans[text match "ReDuCeD"]|order(_key)._key}[0].koans,
#       *[_type == "koan-list"]{"koans": koans[text match "foo"]|order(_key)._key}[0].koans,
#     ]
#   result:
#   - ['k2', 'k3']
#   - ['k3']
#   - ['k3']
#   - []

# - title: "match projection embedded filter multiple"
#   query: |
#     [
#       *[_type == "koan-list"]{"koans": koans[text match ['what', 'ReDuCeD']]|order(_key)._key}[0].koans,
#       *[_type == "koan-list"]{"koans": koans[text match ['original', 'reduced']]|order(_key)._key}[0].koans,
#       *[_type == "koan-list"]{"koans": koans[text match ['foo', 'bar']]|order(_key)._key}[0].koans,
#       *[_type == "koan-list"]{"koans": koans[[_key, text] match ['what', 'reduced']]|order(_key)._key}[0].koans,
#       *[_type == "koan-list"]{"koans": koans[[_key, text] match ['original', 'reduced']]|order(_key)._key}[0].koans,
#       *[_type == "koan-list"]{"koans": koans[[_key, text] match ['foo', 'bar']]|order(_key)._key}[0].koans,
#       *[_type == "koan-list"]{"koans": koans[[_key, text] match ['k3', 'reduced']]|order(_key)._key}[0].koans,
#       *[_type == "koan-list"]{"koans": koans[[_key, text] match 'k3']|order(_key)._key}[0].koans,
#       *[_type == "koan-list"]{"koans": koans[[_key, text] match 'reduced']|order(_key)._key}[0].koans,
#     ]
#   result: [
#     ['k3'],
#     [],
#     [],
#     ['k3'],
#     [],
#     [],
#     [],
#     ['k3'],
#     ['k3'],
#   ]

# - title: "match projection embedded filter wildcard"
#   query: |
#     [
#       *[_type == "koan-list"]{"koans": koans[text match "ReDuC*"]|order(_key)._key}[0].koans,
#       *[_type == "koan-list"]{"koans": koans[text match "reduced*"]|order(_key)._key}[0].koans,
#       *[_type == "koan-list"]{"koans": koans[text match "reducedx*"]|order(_key)._key}[0].koans,
#       *[_type == "koan-list"]{"koans": koans[text match "*reduced"]|order(_key)._key}[0].koans,
#       *[_type == "koan-list"]{"koans": koans[text match "*educed"]|order(_key)._key}[0].koans,
#       *[_type == "koan-list"]{"koans": koans[text match "red*ced"]|order(_key)._key}[0].koans,
#     ]
#   result:
#   - ['k3']
#   - ['k3']
#   - []
#     # FIXME These 3 should error out, see:
#     # https://github.com/sanity-io/gradient/issues/582
#     # FIXME first one should give k3 to be consistent with use in straight filters
#   - []
#   - []
#   - []

- title: "match literal"
  query: |
    [
      "When you can do nothing, what can you do?" match "when",
      "When you can do nothing, what can you do?" match "WhEn",
      "When you can do nothing, what can you do?" match "foo",
      "When you can do nothing, what can you do?" match "noth*",
      "When you can do nothing, what can you do?" match "nothing*",
      "When you can do nothing, what can you do?" match "nothingx*",
      "When you can do nothing, what can you do?" match "*nothing",
      "When you can do nothing, what can you do?" match "*thing",
      "When you can do nothing, what can you do?" match "no*ing",
    ]
  result:
  - true
  - true
  - false
  - true
  - true
  - false
  # FIXME The below should give errors, see:
  # https://github.com/sanity-io/gradient/issues/582
  # FIXME Or at the very least, the below should give true
  # to match filter behavior
  - false
  - false
  - false

- title: "match literal nulls"
  # FIXME Should have tests with null on RHS, but errors out. See:
  # https://github.com/sanity-io/gradient/issues/584
  query: |
    [
      null match "test",
      ["test", null] match "test",
      ["test", null] match "te*",
      ["test", null] match "foo",
    ]
  result:
  - null
  - true
  - true
  - null

- title: "match literal multiple"
  query: |
    [
      "When you can do nothing, what can you do?" match ["WhEn", "what"],
      "When you can do nothing, what can you do?" match ["foo", "what"],
      "When you can do nothing, what can you do?" match ["foo", "bar"],
      ["When you can do nothing", "what can yo do?"] match ["can", "do"],
      ["When you can do nothing", "what can yo do?"] match ["can", "what"],
      ["When you can do nothing", "what can yo do?"] match ["when", "can"],
      ["When you can do nothing", "what can yo do?"] match ["can", "foo"],
      ["When you can do nothing", "what can yo do?"] match "can",
      ["When you can do nothing", "what can yo do?"] match "when",
      ["When you can do nothing", "what can yo do?"] match "foo",
      [] match "foo",
    ]
  result:
  - true
  - false
  - false
  - true
  - true
  - true
  - false
  - true
  - true
  - false
  - false