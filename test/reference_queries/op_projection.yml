title: "-> operator"
documents:
- _id: "e"
  _type: "test"
  name: "E"
- _id: "c"
  _type: "test"
  name: "C"
  other: {_ref: "e"}
  arrayWithRefs:
  - other:
      _ref: "e"
- _id: "d"
  _type: "test"
  name: "D"
- _id: "b"
  _type: "test"
  name: "B"
  other:
    _ref: "c"
  weakother:
    _type: "reference"
    _ref: "c"
    _weak: true
  arrayWithRefs:
  - other: {_ref: "e"}
  - other: {_ref: "c"}
- _id: "a"
  _type: "test"
  name: "A"
  other:
    _ref: "b"
  weakother:
    _ref: "b"
    _weak: true
  others:
  - _ref: "e"
  - _ref: "c"
  - _ref: "b"
  - _ref: "d"
- _id: "id"
  _type: "values"
  v_array: [1, "string", true, null, [1, 2, 3], {"key": "value"}]
  v_decimal: 3.14
  v_false: false
  v_integer: 1
  v_null: null
  v_object: {
    "v_array": ["a", "b", "c"],
    "v_boolean": true,
    "v_decimal": 2.718,
    "v_integer": 2,
    "v_null": null,
    "v_object": {"k": "v"},
    "v_string": "abc"
  }
  v_string: "string"
  v_true: true

tests:
- title: "-> documents"
  skip: true # Don't support inline ->
  query: |
    [
      *[_id == "a"].other->,
      *[_id == "a"][0].other->,
      *[_id == "a"].other->name,
      *[_id == "a"][0].other->name,
      *[_id == "a"].other->missing,
      *[_id == "a"][0].other->missing,
      *[_id == "a"].missing->name,
      *[_id == "a"][0].missing->name,
    ]
  result:
  # FIXME These shouldn't be nulls, see:
  # https://github.com/sanity-io/gradient/issues/691
  - [null]
  - null
  - [null]
  - null
  - [null]
  - null
  - [null]
  - null
- title: "-> documents weak"
  skip: true # Don't support inline ->
  query: |
    [
      *[_id == "a"].weakother->name,
      *[_id == "a"][0].weakother->name,
      *[_id == "a"].weakother->name,
      *[_id == "a"][0].weakother->name,
      *[_id == "a"].weakother->missing,
      *[_id == "a"][0].weakother->missing,
    ]
  result:
  # FIXME These shouldn't be nulls, see:
  # https://github.com/sanity-io/gradient/issues/691
  - ["B"]
  - "B"
  - ["B"]
  - "B"
  - [null]
  - null
- title: "-> documents projection"
  # FIXME Need test cases for a bare -> returning the entire object,
  # but we're not able to express that with the current test infrastructure
  # due to e.g. _createdAt attributes.
  query: |
    [
      *[_id == "a"]{"other": other->name},
      *[_id == "a"][0]{"other": other->name},
      *[_id == "a"]{"other": other->missing},
      *[_id == "a"][0]{"other": other->missing},
      *[_id == "a"]{"other": missing->name},
      *[_id == "a"][0]{"other": missing->name},
    ]
  result:
  # FIXME These should probably still include the property name, see:
  # https://github.com/sanity-io/gradient/issues/485
  - [other: B]
  - other: B
  - [{}]
  - {}
  - [{}]
  - {}
- title: "-> documents projection array"
  # FIXME Need test cases for a bare -> returning the entire object,
  # but we're not able to express that with the current test infrastructure
  # due to e.g. _createdAt attributes.
  query: |
    [
      *[_id == "a"]{"others": others->name},
      *[_id == "a"][0]{"others": others->name},
      *[_id == "a"]{"others": others[]->name},
      *[_id == "a"][0]{"others": others[]->name},
      *[_id == "a"]{"others": others[]->missing},
      *[_id == "a"][0]{"others": others[]->missing},
    ]
  result:
  - [{}]
  - {}
  - [others: ["E", "C", "B", "D"]]
  - others: ["E", "C", "B", "D"]
  - [others: [null, null, null, null]]
  - others: [null, null, null, null]
- title: "-> documents projection array deep"
  skip: true # Don't support in-line ->
  # FIXME Need test cases for a bare -> returning the entire object,
  # but we're not able to express that with the current test infrastructure
  # due to e.g. _createdAt attributes.
  query: |
    [
      *[_id == "a"]{"others": others[]->other->name},
      *[_id == "a"][0]{"others": others[]->other->name},
      *[_id == "a"]{"others": others[]->other->missing},
      *[_id == "a"][0]{"others": others[]->other->missing},
    ]
  result:
  - [others: [null, "E", "C", null]]
  - others: [null, "E", "C", null]
  - [others: [null, null, null, null]]
  - others: [null, null, null, null]
- title: "-> documents projection deep"
  skip: true # Don't support in-line ->
  # FIXME Need test cases for a bare -> returning the entire object,
  # but we're not able to express that with the current test infrastructure
  # due to e.g. _createdAt attributes.
  query: |
    [
      *[_id == "a"]{"another": other->other->name},
      *[_id == "a"][0]{"another": other->other->name},
      *[_id == "a"]{"another": other->other->missing},
      *[_id == "a"][0]{"another": other->other->missing},
    ]
  result:
  # FIXME These should probably still include the property name, see:
  #
  - [another: C]
  - another: C
  - [{}]
  - {}
- title: "-> documents projection ^"
  # Checks that ^ does not accidentally point to this
  query: |
    *[_id == "a"][0]{_id, others[]{_ref, "ref": ^->{_id}}}
  result:
    _id: a
    others:
    - _ref: e
      ref: {}
    - _ref: c
      ref: {}
    - _ref: b
      ref: {}
    - _ref: d
      ref: {}
- title: "-> documents projection weak"
  # FIXME Need test cases for a bare -> returning the entire object,
  # but we're not able to express that with the current test infrastructure
  # due to e.g. _createdAt attributes.
  query: |
    [
      *[_id == "a"]{"other": weakother->name},
      *[_id == "a"][0]{"other": weakother->name},
      *[_id == "a"]{"other": weakother->missing},
      *[_id == "a"][0]{"other": weakother->missing},
    ]
  result:
  # FIXME These should probably still include the property name, see:
  # https://github.com/sanity-io/gradient/issues/485
  - [other: B]
  - other: B
  - [{}]
  - {}

- title: "-> literals invalid"
  query: |
    [
      "abc"->ref,
      1->ref,
      3.14->ref,
      ["abc", 1, 3.14][]->ref,
      {"key": "value"}->ref,
      {"key": "value"}->key,
    ]
  # FIXME These should all give errors
  result:
  - null
  - null
  - null
  - [null, null, null]
  - null
  - null

- title: "-> documents projection array deep nested"
  query: |
    *[_id == "b"]{"others": arrayWithRefs[]{"name": other->name}}
  result:
  - {others: [{name: E}, {name: C}]}

- title: "-> documents projection array deep nested, missing"
  query: |
    *[_id == "b"]{"others": arrayWithRefs[]{"name": other->missing}}
  result:
  - {others: [{}, {}]}

- title: "-> documents projection array subscript deep nested"
  skip: true # Subscripts not supported in general accessors during joins
  query: |
    *[_id == "b"]{"other": arrayWithRefs[0]{"name": other->name}}
  result:
  - {other: {name: E}}

- title: "-> documents projection array subscript deep nested, missing"
  skip: true # Subscripts not supported in general accessors during joins
  query: |
    *[_id == "b"]{"others": arrayWithRefs[0]{"name": other->missing}}
  result:
  - {others: {}}

- title: "-> documents projection missing array deep nested"
  query: |
    *[_id == "b"]{"others": missing[0]{"name": other->name}}
  result:
  - others: {}
