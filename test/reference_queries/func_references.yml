# FIXME ^ and ._ref tests should be split out
title: references() function
documents:
  # Documents we reference
  - _id: r1
    _type: test.node
  - _id: r2
    _type: test.node
  - _id: r3
    _type: test.node
  - _id: r4
    _type: test.node
  # Immediate
  - _id: immediate
    _type: test.node
    immediate:
      _ref: r1
  # Nested object
  - _id: nested
    _type: test.node
    nested:
      nested:
        _ref: r1
  # Array of refs
  - _id: arrayOfRefs
    _type: test.node
    nested:
      - _ref: r1
      - _ref: r2
      - _ref: r3
  # Array of arrays of refs
  - _id: arrayOfArraysOfRefs
    _type: test.node
    nested:
      - nodes:
          - _ref: r1
      - nodes:
          - _ref: r2
  # Array of nested objects
  - _id: arrayOfNestedObjects
    _type: test.node
    nested:
      - node:
          _ref: r1
      - node:
          _ref: r2
      - node:
          _ref: r3
  # Array of array of nested objects
  - _id: arrayOfArraysOfNestedObjects
    _type: test.node
    nested:
      - nodes:
          - node:
              _ref: r1
      - nodes:
          - node:
              _ref: r2
      - nodes:
          - node:
              _ref: r3
  # Movie documents
  - _id: 'carrie-henn'
    _type: 'moviedb.person'
    name: 'Carrie Henn'
    nationality: 'us'
  - _id: 'sigourney-weaver'
    _type: 'moviedb.person'
    name: 'Sigourney Weaver'
    nationality: 'us'
    famousFor:
      _ref: 'aliens'
      _weak: true
    deeply:
      famousFor:
        _ref: 'aliens'
        _weak: true
    deepArray:
      - famousFor:
          _ref: 'aliens'
          _weak: true
    deepNestedArray:
      - famousFor:
          reason: 'Awesome Movie'
          movie:
            _ref: 'aliens'
            _weak: true
  - _id: 'james-cameron'
    _type: 'moviedb.person'
    name: 'James Cameron'
    nationality: 'ca'
  - _id: 'aliens'
    _type: 'moviedb.movie'
    title: 'Aliens'
    directors:
      - _ref: 'james-cameron'
    actors:
      - character: Newt
        actor:
          _ref: 'carrie-henn'
      - character: Ellen Ripley
        actor:
          _ref: 'sigourney-weaver'
  - _id: 'gorillas-in-the-mist'
    _type: 'moviedb.movie'
    title: 'Gorillas in the Mist'
    actors:
      - character: 'Dian Fossey'
        actor:
          _ref: 'sigourney-weaver'

tests:
  - title: references(r1)
    query: |
      (*[references("r1")] | order(_id asc))._id
    result:
      - arrayOfArraysOfNestedObjects
      - arrayOfArraysOfRefs
      - arrayOfNestedObjects
      - arrayOfRefs
      - immediate
      - nested

  - title: references(r2)
    query: |
      (*[references("r2")] | order(_id asc))._id
    result:
      - arrayOfArraysOfNestedObjects
      - arrayOfArraysOfRefs
      - arrayOfNestedObjects
      - arrayOfRefs

  - title: references(r1, r2)
    query: |
      (*[references("r1", "r2")] | order(_id asc))._id
    result:
      - arrayOfArraysOfNestedObjects
      - arrayOfArraysOfRefs
      - arrayOfNestedObjects
      - arrayOfRefs
      - immediate
      - nested

  - title: references(r4)
    query: |
      (*[references("r4")] | order(_id asc))._id
    result: []

  - title: 'basic references() query'
    query: |
      *[references("james-cameron")]{_id}
    result:
      - _id: 'aliens'

  - title: 'another basic references() query'
    query: |
      *[references("sigourney-weaver")]{_id}
    result:
      - _id: 'aliens'
      - _id: 'gorillas-in-the-mist'

  - title: 'hardcore explicit rejoin'
    skip: true # FIXME Requires ^ to target the parent scope syntactically. Might not be important
    query: |
      *[_type == "moviedb.movie" && title == "Aliens"]{
        "actors": actors[]{
          "actor": actor->{
            "prop": *[name == ^.name][0]{name}
          }
        }
      }
    result:
      - actors:
          - actor:
              prop:
                name: 'Carrie Henn'
          - actor:
              prop:
                name: 'Sigourney Weaver'

  - title: 'People with movies'
    skip: true # Fixme ^ scoping in mongodb driver
    query: |
      *[_type == "moviedb.person"] | order(name) | {
        name,
        "movies": *[_type == "moviedb.movie" && references(^._id)] | order(title) | {title}
      }
    result:
      - name: 'Carrie Henn'
        movies:
          - title: 'Aliens'
      - name: 'James Cameron'
        movies:
          - title: 'Aliens'
      - name: 'Sigourney Weaver'
        movies:
          - title: 'Aliens'
          - title: 'Gorillas in the Mist'

  - title: 'ref equality'
    query: |
      *["james-cameron" in directors[]._ref]{_id}
    result:
      - _id: 'aliens'

  - title: 'multiple references'
    query: |
      *[references('sigourney-weaver') || references('james-cameron')]|order(title desc){title}
    result:
      - title: 'Gorillas in the Mist'
      - title: 'Aliens'

  - title: 'refs are also strings'
    query: |
      *[famousFor._ref == "aliens"]._id
    result:
      - sigourney-weaver
